[{
    "description": "extend for Array",
    "filename": "pastry.array.js",
    "requires": ["pastry.js", "pastry.validator.js", "pastry.object.js"]
}, "extend of Javascript 1.6", {
    "description": "Returns the first index at which a given element can be found in the array, or -1 if it is not present.",
    "param": [{
        "type": "object",
        "name": "searchElement",
        "description": "Element to locate in the array."
    }, {
        "type": "number",
        "name": "fromIndex",
        "description": "The index to start the search at. Default: 0 (Entire array is searched)."
    }],
    "return": {
        "type": "number",
        "description": "index of element."
    },
    "syntax": "array.indexOf(searchElement[, fromIndex])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"
    }
}, {
    "description": "Returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
    "param": [{
        "type": "object",
        "name": "searchElement",
        "description": "Element to locate in the array."
    }, {
        "type": "number",
        "name": "fromIndex",
        "description": "The index at which to start searching backwards. Defaults to the array's length."
    }],
    "return": {
        "type": "number",
        "description": "index of element."
    },
    "syntax": "array.lastIndexOf(searchElement[, fromIndex])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf"
    }
}, {
    "description": "Tests whether all elements in the array pass the test implemented by the provided function.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to test for each element."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as this when executing callback."
    }],
    "return": {
        "type": "boolean",
        "description": "if test succeeded or not."
    },
    "syntax": "array.every(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"
    }
}, {
    "description": "Creates a new array with all elements that pass the test implemented by the provided function.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to test each element of the array."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as this when executing callback."
    }],
    "return": {
        "type": "array",
        "description": "result array."
    },
    "syntax": "array.filter(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
    }
}, {
    "description": "Executes a provided function once per array element.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to execute for each element."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as this when executing callback."
    }],
    "syntax": "array.forEach(callback[, thisObj]) || array.each(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
    }
}, "see pastry.object.js: object.forEach || object.each", {
    "description": "Creates a new array with the results of calling a provided function on every element in this array.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function that produces an element of the new Array from an element of the current one."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as this when executing callback."
    }],
    "return": {
        "type": "array",
        "description": "result array."
    },
    "syntax": "array.map(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    }
}, {
    "description": "Tests whether some element in the array passes the test implemented by the provided function.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to test for each element."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as this when executing callback."
    }],
    "return": {
        "type": "boolean",
        "description": "if test succeeded or not."
    },
    "syntax": "array.some(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"
    }
}, "extend of Javascript 1.8", {
    "description": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to execute on each value in the array taking four arguments:"
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as the first argument to the first call of the callback."
    }],
    "paramOfCallback": [{
        "type": "object",
        "name": "previousValue",
        "description": "The value previously returned in the last invocation of the callback or initialValue if supplied."
    }, {
        "type": "object",
        "name": "currentValue",
        "description": "The current element being processed in the array."
    }, {
        "type": "number",
        "name": "index",
        "description": "The index of the current element being processed in the array."
    }, {
        "type": "array",
        "name": "array",
        "description": "The array reduce was called upon."
    }],
    "return": {
        "type": "object",
        "description": "result value."
    },
    "syntax": "array.reduce(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"
    }
}, {
    "description": "Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.",
    "param": [{
        "type": "function",
        "name": "callback",
        "description": "Function to execute on each value in the array."
    }, {
        "type": "object",
        "name": "thisObj",
        "description": "Object to use as the first argument to the first call of the callback."
    }],
    "return": {
        "type": "object",
        "description": "result value."
    },
    "syntax": "array.reduceRight(callback[, thisObj])",
    "refference": {
        "type": "link",
        "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight"
    }
}, "extend of PT.ick", {
    "description": "binarySearch.",
    "param": [{
        "type": "object",
        "name": "element",
        "description": "element to be searched."
    }, {
        "type": "function",
        "name": "compareFunc",
        "description": "compare function executed when searching."
    }],
    "return": {
        "type": "number",
        "description": "result index."
    },
    "syntax": "array.binarySearch(element, compareFunc)"
}, {
    "description": "Remove elements according to the given fromIndex and toIndex, and return the rest array.",
    "param": [{
        "type": "number",
        "name": "fromIndex",
        "description": "index to remove from."
    }, {
        "type": "number",
        "name": "toIndex",
        "description": "index to remove to."
    }],
    "syntax": "array.remove([fromIndex[, toIndex]])",
    "refference": "Array Remove - B. John Resig (MIT Licensed)"
}, {
    "description": "replace.",
    "param": [{
        "type": "object",
        "name": "element",
        "description": "element to be replaced."
    }, {
        "type": "object",
        "name": "withElement",
        "description": "element to replace with."
    }],
    "syntax": "array.replace(element, withElement)"
}, {
    "description": "intersection set of two arrays (this âˆ© that)",
    "param": [{
        "type": "array",
        "name": "that",
        "description": "the array to get intersection set with."
    }],
    "return": {
        "type": "array",
        "description": "result array."
    },
    "syntax": "array.intersection(that)"
}, {
    "description": "complement set of two arrays (this - that)",
    "param": [{
        "type": "array",
        "name": "that",
        "description": "the array to get complement set with."
    }],
    "return": {
        "type": "array",
        "description": "result array."
    },
    "syntax": "array.complement(that)"
}, {
    "description": "union set of two arrays (this U that)",
    "param": [{
        "type": "array",
        "name": "that",
        "description": "the array to get union set with."
    }],
    "return": {
        "type": "array",
        "description": "result array."
    },
    "syntax": "array.intersection(that)"
}, {
    "description": "uniq sub array of an array.",
    "return": {
        "type": "array",
        "description": "result sub array."
    },
    "syntax": "array.uniq()"
}]